import os
import json
from dotenv import load_dotenv
from datetime import date, timedelta, datetime

from langchain_core.messages import HumanMessage
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.tools import tool
from langchain.agents import AgentExecutor, create_tool_calling_agent
from sqlalchemy import create_engine, text, Connection
from sqlalchemy.engine.base import Engine

# --- 1. C·∫§U H√åNH V√Ä K·∫æT N·ªêI DATABASE ---

load_dotenv()

GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
# Ch·ªâ l·∫•y gi√° tr·ªã t·ª´ file .env
DATABASE_URL = os.getenv("DATABASE_URL")

# Th√™m d√≤ng n√†y ƒë·ªÉ ki·ªÉm tra xem ƒë√£ load ƒë∆∞·ª£c ch∆∞a, n·∫øu ch∆∞a th√¨ b√°o l·ªói ngay
if not DATABASE_URL:
    raise ValueError(
        "L·ªói: Kh√¥ng t√¨m th·∫•y ho·∫∑c kh√¥ng ƒë·ªçc ƒë∆∞·ª£c bi·∫øn DATABASE_URL t·ª´ file .env")

# Kh·ªüi t·∫°o k·∫øt n·ªëi Database theo ƒë·∫∑c t·∫£
engine: Engine = create_engine(DATABASE_URL)

# H√†m tr·ª£ gi√∫p ƒë·ªÉ l·∫•y gi√° tr·ªã key linh ho·∫°t


def get_flexible_arg(args, key, default=None):
    """Ki·ªÉm tra key ch·ªØ th∆∞·ªùng, sau ƒë√≥ l√† ch·ªØ hoa ƒë·∫ßu."""
    return args.get(key, args.get(key.capitalize(), default))


# Kh·ªüi t·∫°o m√¥ h√¨nh ng√¥n ng·ªØ
llm_brain = ChatGoogleGenerativeAI(
    model="gemini-2.5-flash",  # S·ª≠ d·ª•ng model m·ªõi h∆°n n·∫øu c√≥ th·ªÉ
    google_api_key=GEMINI_API_KEY,
    temperature=0
)

# --- 2. ƒê·ªäNH NGHƒ®A C√îNG C·ª§ (TOOLS) ƒê√É ƒê∆Ø·ª¢C C·∫¨P NH·∫¨T ---

# L∆ØU √ù: user_id ƒëang ƒë∆∞·ª£c g√°n c·ª©ng l√† 1 cho m·ª•c ƒë√≠ch demo.
# Trong th·ª±c t·∫ø, b·∫°n c·∫ßn m·ªôt c∆° ch·∫ø x√°c th·ª±c ƒë·ªÉ l·∫•y user_id ƒë·ªông.
CURRENT_USER_ID = 1


@tool
def tao_task_va_len_lich(input: str) -> str:
    """
    S·ª≠ d·ª•ng c√¥ng c·ª• n√†y khi ng∆∞·ªùi d√πng mu·ªën T·∫†O, TH√äM, ho·∫∑c L√äN L·ªäCH m·ªôt c√¥ng vi·ªác/s·ª± ki·ªán M·ªöI.
    C√¥ng c·ª• n√†y s·∫Ω t·∫°o m·ªôt 'task' v√† sau ƒë√≥ g·∫Øn n√≥ v√†o m·ªôt 'schedule' tr√™n l·ªãch.
    ƒê·∫ßu v√†o: Chu·ªói JSON ch·ª©a 'tieu_de', 'thoi_gian_bat_dau' (YYYY-MM-DD HH:MM:SS), v√† 'thoi_gian_ket_thuc' (YYYY-MM-DD HH:MM:SS).
    """
    try:
        args = json.loads(input)
        tieu_de = get_flexible_arg(args, "tieu_de", "C√¥ng vi·ªác m·ªõi")
        start_time_str = get_flexible_arg(args, "thoi_gian_bat_dau")
        end_time_str = get_flexible_arg(args, "thoi_gian_ket_thuc")

        if not all([tieu_de, start_time_str, end_time_str]):
            return "‚ùå L·ªói: Thi·∫øu th√¥ng tin 'tieu_de', 'thoi_gian_bat_dau', ho·∫∑c 'thoi_gian_ket_thuc'."

        with engine.connect() as connection:
            # B·∫Øt ƒë·∫ßu m·ªôt transaction ƒë·ªÉ ƒë·∫£m b·∫£o c·∫£ hai h√†nh ƒë·ªông c√πng th√†nh c√¥ng
            with connection.begin() as transaction:
                try:
                    # 1. T·∫°o task m·ªõi trong b·∫£ng `tasks` v√† l·∫•y task_id
                    task_query = text(
                        "INSERT INTO tasks (user_id, title) VALUES (:user_id, :title) RETURNING id;"
                    )
                    result = connection.execute(
                        task_query, {"user_id": CURRENT_USER_ID, "title": tieu_de})
                    task_id = result.scalar_one_or_none()

                    if not task_id:
                        raise Exception("Kh√¥ng th·ªÉ t·∫°o task m·ªõi.")

                    # 2. T·∫°o l·ªãch tr√¨nh trong b·∫£ng `schedules` v·ªõi task_id v·ª´a nh·∫≠n ƒë∆∞·ª£c
                    schedule_query = text(
                        """
                        INSERT INTO schedules (user_id, task_id, start_time, end_time)
                        VALUES (:user_id, :task_id, :start_time, :end_time);
                        """
                    )
                    connection.execute(
                        schedule_query,
                        {
                            "user_id": CURRENT_USER_ID,
                            "task_id": task_id,
                            "start_time": start_time_str,
                            "end_time": end_time_str,
                        },
                    )
                    transaction.commit()  # Ho√†n t·∫•t transaction
                    return f"‚úÖ ƒê√£ l√™n l·ªãch '{tieu_de}' t·ª´ {start_time_str} ƒë·∫øn {end_time_str} th√†nh c√¥ng!"
                except Exception as e:
                    transaction.rollback()  # Ho√†n t√°c n·∫øu c√≥ l·ªói
                    return f"‚ùå L·ªói khi th·ª±c hi·ªán giao d·ªãch CSDL: {e}"

    except Exception as e:
        return f"‚ùå L·ªói th·ª±c thi T·∫†O: L·ªói DB ho·∫∑c tham s·ªë JSON: {e}"


@tool
def xoa_task_theo_lich(input: str) -> str:
    """
    S·ª≠ d·ª•ng c√¥ng c·ª• n√†y khi ng∆∞·ªùi d√πng mu·ªën X√ìA, H·ª¶Y ho·∫∑c LO·∫†I B·ªé m·ªôt c√¥ng vi·ªác/s·ª± ki·ªán ƒë√£ c√≥.
    ƒê·∫ßu v√†o: Chu·ªói JSON ch·ª©a 'tieu_de' ƒë·ªÉ x√°c ƒë·ªãnh c√¥ng vi·ªác c·∫ßn x√≥a.
    """
    try:
        args = json.loads(input)
        tieu_de = get_flexible_arg(args, "tieu_de")
        if not tieu_de:
            return "‚ùå Vui l√≤ng cung c·∫•p ti√™u ƒë·ªÅ c·ªßa s·ª± ki·ªán c·∫ßn x√≥a."

        with engine.connect() as connection:
            with connection.begin() as transaction:
                # X√≥a task s·∫Ω t·ª± ƒë·ªông x√≥a schedule li√™n quan nh·ªù `ON DELETE CASCADE`
                query = text(
                    "DELETE FROM tasks WHERE title = :title AND user_id = :user_id;")
                result = connection.execute(
                    query, {"title": tieu_de, "user_id": CURRENT_USER_ID})
                transaction.commit()

                if result.rowcount > 0:
                    return f"üóëÔ∏è ƒê√£ x√≥a th√†nh c√¥ng c√¥ng vi·ªác '{tieu_de}' v√† l·ªãch tr√¨nh li√™n quan."
                else:
                    return f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c√¥ng vi·ªác n√†o c√≥ t√™n '{tieu_de}' ƒë·ªÉ x√≥a."
    except Exception as e:
        return f"‚ùå L·ªói th·ª±c thi X√ìA: {e}"


@tool
def tim_lich_trinh(input: str) -> str:
    """
    S·ª≠ d·ª•ng c√¥ng c·ª• n√†y khi ng∆∞·ªùi d√πng mu·ªën T√åM KI·∫æM, XEM ho·∫∑c LI·ªÜT K√ä c√°c s·ª± ki·ªán trong m·ªôt kho·∫£ng th·ªùi gian.
    ƒê·∫ßu v√†o: Chu·ªói JSON ch·ª©a 'ngay_bat_dau' (YYYY-MM-DD) v√† 'ngay_ket_thuc' (YYYY-MM-DD).
    """
    try:
        args = json.loads(input)
        start_date = get_flexible_arg(args, 'ngay_bat_dau', str(date.today()))
        end_date = get_flexible_arg(
            args, 'ngay_ket_thuc', str(date.today() + timedelta(days=7)))

        with engine.connect() as connection:
            # JOIN 2 b·∫£ng `schedules` v√† `tasks` ƒë·ªÉ l·∫•y th√¥ng tin
            query = text(
                """
                SELECT t.title, s.start_time, s.end_time
                FROM schedules s
                JOIN tasks t ON s.task_id = t.id
                WHERE s.user_id = :user_id
                  AND s.start_time::date BETWEEN :start_date AND :end_date
                ORDER BY s.start_time
                LIMIT 10;
                """
            )
            results = connection.execute(
                query, {"user_id": CURRENT_USER_ID,
                        "start_date": start_date, "end_date": end_date}
            ).fetchall()

            if results:
                events = [
                    f"('{row.title}', t·ª´ '{row.start_time.strftime('%Y-%m-%d %H:%M')}' ƒë·∫øn '{row.end_time.strftime('%Y-%m-%d %H:%M')}')"
                    for row in results
                ]
                return f"üîé ƒê√£ t√¨m th·∫•y {len(events)} s·ª± ki·ªán: {'; '.join(events)}"
            else:
                return f"üì≠ Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán n√†o t·ª´ {start_date} ƒë·∫øn {end_date}."

    except Exception as e:
        return f"‚ùå L·ªói th·ª±c thi T√åM KI·∫æM: {e}"


# --- 3. L·∫ÆP R√ÅP LOGIC AGENT ---

tools_list = [tao_task_va_len_lich, xoa_task_theo_lich, tim_lich_trinh]

system_prompt_template = (
    "B·∫°n l√† m·ªôt tr·ª£ l√Ω AI chuy√™n qu·∫£n l√Ω l·ªãch tr√¨nh cho ·ª©ng d·ª•ng Skedule. "
    "Nhi·ªám v·ª• c·ªßa b·∫°n l√† ph√¢n t√≠ch y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng v√† S·ª¨ D·ª§NG C√ÅC C√îNG C·ª§ ƒë∆∞·ª£c cung c·∫•p ƒë·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông. "
    "Lu√¥n lu√¥n h√†nh ƒë·ªông ngay l·∫≠p t·ª©c khi m·ªôt c√¥ng c·ª• c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng. "
    "QUY T·∫ÆC B·∫ÆT BU·ªòC:\n"
    "1. NG√ÄY GI·ªú: PH·∫¢I s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng 'YYYY-MM-DD HH:MM:SS' khi g·ªçi c√¥ng c·ª• t·∫°o l·ªãch. "
    "   N·∫øu ng∆∞·ªùi d√πng kh√¥ng cung c·∫•p gi·ªù, h√£y gi·∫£ ƒë·ªãnh gi·ªù l√†m vi·ªác m·∫∑c ƒë·ªãnh (v√≠ d·ª•: b·∫Øt ƒë·∫ßu l√∫c 09:00:00, k·∫øt th√∫c l√∫c 10:00:00).\n"
    "2. NƒÇM: Lu√¥n gi·∫£ ƒë·ªãnh nƒÉm hi·ªán t·∫°i l√† 2025 n·∫øu kh√¥ng ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.\n"
    "3. H√ÄNH ƒê·ªòNG: Ph√¢n t√≠ch k·ªπ y√™u c·∫ßu ƒë·ªÉ ch·ªçn ƒë√∫ng c√¥ng c·ª•: 'tao_task_va_len_lich' cho vi·ªác t·∫°o m·ªõi, "
    "'xoa_task_theo_lich' cho vi·ªác h·ªßy b·ªè, v√† 'tim_lich_trinh' cho vi·ªác xem/li·ªát k√™.\n"
    "4. PH·∫†M VI NG√ÄY: Khi ng∆∞·ªùi d√πng n√≥i 'Tu·∫ßn sau' (H√¥m nay l√† Th·ª© NƒÉm, 09/10/2025), "
    "   b·∫°n PH·∫¢I t√≠nh to√°n v√† truy·ªÅn ng√†y ch√≠nh x√°c: ngay_bat_dau='2025-10-13' (Th·ª© Hai) v√† ngay_ket_thuc='2025-10-19' (Ch·ªß Nh·∫≠t).\n"
    "5. Lu√¥n ph·∫£n h·ªìi cu·ªëi c√πng b·∫±ng Ti·∫øng Vi·ªát."
)

prompt = ChatPromptTemplate.from_messages([
    ("system", system_prompt_template),
    MessagesPlaceholder(variable_name="chat_history", optional=True),
    ("human", "{input}"),
    MessagesPlaceholder(variable_name="agent_scratchpad"),
])

agent = create_tool_calling_agent(llm_brain, tools_list, prompt)
agent_executor = AgentExecutor(
    agent=agent,
    tools=tools_list,
    verbose=True
)

# --- 4. CH·∫†Y TH·ª¨ NGHI·ªÜM ---

# Test 1: T·∫°o task v√† l·ªãch tr√¨nh
# user_request = "T·∫°o cho t√¥i m·ªôt task 'Ho√†n th√†nh b√°o c√°o' v√†o 3 gi·ªù chi·ªÅu ng√†y mai"
# Test 2: T√¨m ki·∫øm l·ªãch tr√¨nh
# user_request = "Tu·∫ßn sau t√¥i c√≥ c√¥ng vi·ªác g√¨ kh√¥ng?"
user_request = "T·∫°o m·ªôt l·ªãch h·∫πn 'G·∫∑p kh√°ch h√†ng' v√†o 10 gi·ªù s√°ng th·ª© ba tu·∫ßn t·ªõi"
# Test 3: X√≥a task
# user_request = "H·ªßy cu·ªôc h·ªçp 'Ho√†n th√†nh b√°o c√°o' ƒëi"

print(f"\n=======================================================")
print(f"[NG∆Ø·ªúI D√ôNG] {user_request}")
print(f"=======================================================")

final_result = agent_executor.invoke({"input": user_request})

print("\n[‚úÖ K·∫øt qu·∫£ cu·ªëi c√πng]")
print(final_result.get("output", "L·ªói: Kh√¥ng t√¨m th·∫•y ph·∫£n h·ªìi cu·ªëi c√πng"))
